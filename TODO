
------
ADR2D
------

- fix number of time steps to take
- fix meshes and sample meshes %

- add checks, e.g. num of basis cannot be larger than dofs, etc.
- calculate approx memory footprint for FOM app
- implement Householder QR dense solver for Kokkos-CUDA
- move state/xy prints to utils
- kokkos do FOM with bdf1 ?


MS problem:
(a) eigen, fom, rk4	    : done, ok, convergence is as expected
(b) eigen, fom, bdf1	: done, ok, convergence is as expected and errors are better than rk4
(c) kokkos, fom, rk4	: done, ok, matches eigen rk4 exactly (serial mac)
(d) kokkos, fom, bdf1	: missing

ABCCHEM problem:
(a) eigen, fom, rk4		: done
(b) eigen, fom, bdf1	: done
(c) kokkos, fom, rk4	: done
(d) kokkos, fom, bdf1	: missing


Notes:
- to solve the FOM with bdf1 the jacobian is a square sparse matrix.
In Eigen, it seems to be a good choice to use bicgstab.

- to do LSPG, we opt for using the normal equations.
This is because we don;t have QR for Kokkos yet.
We need to find a dense solver to solve J^T J that works for
both Eigen and Kokkos in a similar way. It seems that Householder QR
is consistent between Eigen and Kokkos host and Kokkos cuda.
If we use the same solver, then we can even compare.

########################################################################

Recall powers of two:
2^6  = 64
2^7  = 128
2^8  = 256
2^9  = 512
2^10 = 1024
2^11 = 2048
2^12 = 4096
2^13 = 8192

Square mesh with 3 dofs per cell such that we have these cases:
tag: b  Nx = 2^7   =>  16,384     total cells  =>  49,152      dofs
tag: c  Nx = 2^8   =>  65,536     total cells  =>  196,608     dofs
tag: d  Nx = 2^9   =>  262,144    total cells  =>  786,432     dofs
tag: e  Nx = 2^10  =>  1,048,576  total cells  =>  3,145,728   dofs
tag: f  Nx = 2^11  =>  4,194,304  total cells  =>  12,582,912  dofs
tag: g  Nx = 2^12  =>  16,777,216 total cells  =>  50,331,648  dofs
tag: h  Nx = 2^13  =>  67,108,864 total cells  =>  201,326,592 dofs


ROM sizes (the rom size MUST be less than the DOFs, because we want a tall-skinny matrix
and ideally it should be small compared to the dofs)
romSize_cases = np.array([10, 20])#, 50, 100, 200])
